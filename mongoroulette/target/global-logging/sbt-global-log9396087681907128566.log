[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@6fbc7853, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/Roulette.scala","languageId":"scala","version":1,"text":"package example\n\nobject Roulette {\n\n    var RNG = scala.util.Random\n\n    var betType = 0\n    var betAmount = 0\n\n    var spinNumber: Int = 0\n    var singleNumber: Int = 0\n\n    var b = Console.BLACK\n    var r = Console.RED\n    var w = Console.WHITE\n    var g = Console.GREEN\n\n    def showTable = {\n        \n        var row1 = \"[ ] \"+r+\"[3] \"+b+\"[6] \"+r+\"[9] [12] \"+b+\"[15] \"+r+\"[18] [21] \"+b+\"[24] \"+r+\"[27] [30] \"+b+\"[33] \"+r+\"[36] \"+w+\"[2 to 1 Odds]\"\n        var row2 = g+\"[0] \"+b+\"[2] \"+r+\"[5] \"+b+\"[8] [11] \"+r+\"[14] \"+b+\"[17] [20] \"+r+\"[23] \"+b+\"[26] [29] \"+r+\"[32] \"+b+\"[35] \"+w+\"[2 to 1 Odds]\"\n        var row3 = \"[ ] \"+r+\"[1] \"+b+\"[4] \"+r+\"[7] \"+b+\"[10] [13] \"+r+\"[16] [19] \"+b+\"[22] \"+r+\"[25] \"+b+\"[28] [31] \"+r+\"[34] \"+w+\"[2 to 1 Odds]\"\n        var row4 = \"    [   1st 12     ] [    2nd  12      ] [    3rd  12      ]\"\n        var row5 = \"    [ 1-18 ][ EVEN ] \"+b+\"[ BLACK ] \"+r+\"[  RED  ] \"+w+\"[  ODD  ][  19-36 ]\"\n\n        println(\" \")\n        println(\" _____________________________ Roulette Table ______________________________\")\n        println(\"| \" + row1 + \" |\")\n        println(\"| \" + row2 + \" |\")\n        println(\"| \" + row3 + \" |\")\n        println(\"| \" + row4 + \"               |\")\n        println(\"| \" + row5 + \"               |\")\n        println(\" ___________________________________________________________________________\")\n        println(\" \")\n    }\n\n    def bet: Unit = {\n\n        println(\" \")\n        User.displayStats\n\n        println(\"Choose your Bet Type\")\n        println(\" 1: Row One      4: 1st 12      7: (1-18)      10: ODD      13: Single Number \")\n        println(\" 2: Row Two      5: 2nd 12      8: (19-36)     11: Black \")\n        println(\" 3: Row Three    6: 3rd 12      9: EVEN        12: Red \")\n\n        println(\" \")\n\n        betTypeMatch\n\n        println(\"Choose your Bet Amount\")\n        println(\" \")\n        println(\"BetAmount:\")\n\n        betAmount = scala.io.StdIn.readInt\n\n        if(betAmount > 0 & betAmount <= User.coins){\n            println(\" \")\n        }else if(betAmount > User.coins){\n            println(\" \")\n            println(\"- Not enough coins\")\n            println(\"- Bet = 0\")\n            betAmount = 0\n            println(\"\")\n        }else{\n            println(\" \")\n            println(\"- Not a valid number\")\n            println(\"- Bet = 0\")\n            betAmount = 0\n            println(\"\")\n        }\n\n        User.coins -= betAmount\n\n        spin\n\n        betType match{\n            case 1 =>   spinNumber match{\n                            case 3 | 6 | 9 | 12 | 15 | 18 | 21 | 24 | 27 | 30 | 33 | 36 =>  User.coins += betAmount * 3\n                                                                                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 3) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 2 =>   spinNumber match{\n                            case 2 | 5 | 8 | 11 | 14 | 17 | 20 | 23 | 26 | 29 | 32 | 35 =>  User.coins += betAmount * 3\n                                                                                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 3) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 3 =>   spinNumber match{\n                            case 1 | 4 | 7 | 10 | 13 | 16 | 19 | 22 | 25 | 28 | 31 | 34 =>  User.coins += betAmount * 3\n                                                                                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 3) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 4 =>   spinNumber match{\n                            case 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 =>    User.coins += betAmount * 3\n                                                                                        println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 3) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)   \n\n            case 5 =>   spinNumber match{\n                            case 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 =>   User.coins += betAmount * 3\n                                                                                                println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 3) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)  \n\n            case 6 =>   spinNumber match{\n                            case 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 =>   User.coins += betAmount * 3\n                                                                                                println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 3) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 7 =>   spinNumber match{\n                            case 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 =>  User.coins += betAmount * 2\n                                                                                                                    println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 2) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 8 =>   spinNumber match{\n                            case 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 => User.coins += betAmount * 2\n                                                                                                                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 2) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)   \n\n            case 9 =>   if((spinNumber + 2) % 2 == 0){\n                            User.coins += betAmount * 2\n                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 2) + \" coin(s)\")\n                        }else{\n                            println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 10 =>  if((spinNumber + 2) % 2 != 0){\n                            User.coins += betAmount * 2\n                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 2) + \" coin(s)\")\n                        }else{\n                            println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 11 =>  spinNumber match{\n                            case 2 | 4 | 6 | 8 | 10 | 11 | 13 | 15 | 17 | 20 | 22 | 24 | 26 | 28 | 29 | 31 | 33 | 35 => User.coins += betAmount * 2\n                                                                                                                        println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 2) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 12 =>  spinNumber match{\n                            case 1 | 3 | 5 | 7 | 9 | 12 | 14 | 16 | 18 | 19 | 21 | 23 | 25 | 27 | 30 | 32 | 34 | 36 =>  User.coins += betAmount * 2\n                                                                                                                        println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 2) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 13 =>  if(spinNumber == singleNumber){\n                            User.coins += betAmount * 37\n                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 37) + \" coin(s)\")\n                        }else{\n                            println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n        }\n\n        playOrCollect\n    }\n\n    def spin = {\n        println(Console.GREEN + \"Spinning...\")\n        Thread.sleep(1000)\n        spinNumber = RNG.nextInt(36)\n\n        println(Console.WHITE + \"\")\n        println(\"Number is  - \" + Console.CYAN + \"[\" + spinNumber + \"]\" + Console.WHITE + \" - \")\n        println(\"\")\n    }\n\n    def betTypeMatch: Unit = {\n        println(\"Choose Bet:\")\n\n        betType = scala.io.StdIn.readInt\n        println(\"\")\n\n        betType match{\n            case 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 => println(\" \")\n\n            case 13 =>  println(\"Choose your number\")\n                        singleNumber = scala.io.StdIn.readInt\n\n            case _ =>   println(\"Not a valid number\")\n                        println(\"- Bet = 0\")\n                        println(\"\")\n                        betTypeMatch\n        }\n    }\n\n    def playOrCollect: Unit = {\n        println(\"\")\n        User.displayStats\n        \n        println(\"1: Play Again\")\n        println(\"2: Collect Winnings\")\n\n        singleNumber = scala.io.StdIn.readInt\n\n        singleNumber match{\n            case 1 =>   println(\"Good Luck!\")\n\n            case 2 =>   println(\"\")\n                        println(\"Are you sure?\")\n                        println(\"1: Yes\")\n                        println(\"2: No\")\n\n                        singleNumber = scala.io.StdIn.readInt\n\n                        singleNumber match{\n                            case 1 =>   StartGame.sitting = false\n                            case 2 =>   println(\"\")\n                                        playOrCollect\n                            case _ =>   println(\"Enter a valid number\")\n                                        playOrCollect\n                        }\n\n            case _ =>   println(\"Enter a valid number\")   \n                        playOrCollect\n        }\n    }\n\n    def chooseTheme: Unit = {\n        println(\"\")\n        println(\"Choose Color Theme:\")\n        println(\"1: Black + Red\")\n        println(\"2: Blue + Green\")\n\n        singleNumber = scala.io.StdIn.readInt()\n\n        singleNumber match{\n            case 1 => println(\"\")\n\n            case 2 => b = Console.CYAN\n                      r = Console.GREEN\n                      println(\"\")\n\n            case _ => println(\"Enter Valid Option\")\n                      chooseTheme\n        }\n    }\n}\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\18284\Desktop\ScalaProjects\mongoroulette\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Dec 11, 2021, 9:02:39 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/Roulette.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/HighScore.scala","languageId":"scala","version":1,"text":"package example\n\nobject HighScore {\n    var score = 0\n    \n    def recordScore = {\n        score = User.coins\n        \n        println(\"Your Score is: \" + User.coins)\n    }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/HighScore.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/Helpers.scala","languageId":"scala","version":1,"text":"package example\n\nimport java.util.concurrent.TimeUnit\n\nimport scala.concurrent.Await\nimport scala.concurrent.duration.Duration\n\nimport org.mongodb.scala._\n\nobject Helpers {\n\n  implicit class DocumentObservable[C](val observable: Observable[Document]) extends ImplicitObservable[Document] {\n    override val converter: (Document) => String = (doc) => doc.toJson\n  }\n\n  implicit class GenericObservable[C](val observable: Observable[C]) extends ImplicitObservable[C] {\n    override val converter: (C) => String = (doc) => doc.toString\n  }\n\n  trait ImplicitObservable[C] {\n    val observable: Observable[C]\n    val converter: (C) => String\n\n    def results(): Seq[C] = Await.result(observable.toFuture(), Duration(10, TimeUnit.SECONDS))\n    def headResult() = Await.result(observable.head(), Duration(10, TimeUnit.SECONDS))\n    def printResults(initial: String = \"\"): Unit = {\n      if (initial.length > 0) print(initial)\n      results().foreach(res => println(converter(res)))\n    }\n    def printHeadResult(initial: String = \"\"): Unit = println(s\"${initial}${converter(headResult())}\")\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/Helpers.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/StartGame.scala","languageId":"scala","version":1,"text":"package example\n\nimport User._\nimport Roulette._\nimport HighScore._\n\nimport example.Helpers._\nimport org.mongodb.scala._\nimport org.mongodb.scala.model._\nimport scala.io.Source\nimport org.mongodb.scala.model.Filters._\nimport org.mongodb.scala.model.Sorts._\nimport org.mongodb.scala.model.Projections._\nimport org.mongodb.scala.model.Aggregates._\nimport org.mongodb.scala.model.Updates._\n\nobject StartGame {\n    def main(args: Array[String]) = {\n\n        Thread.sleep(1000)\n\n        User.namingUser\n        Roulette.chooseTheme\n\n        while(sitting == true){\n            if(User.coins > 0){\n                Roulette.showTable\n                Roulette.bet\n            }else{\n                println(\"Better luck next time\")\n                println(\"GAME OVER\")\n                sitting = false\n            }\n        }\n\n        println(\"\")\n        println(\"You walk from the table\")\n        println(\"\")\n        HighScore.recordScore\n        archiveScore\n    }\n\n    var sitting = true\n\n    val client: MongoClient = MongoClient()\n    val database: MongoDatabase = client.getDatabase(\"ScalaProjectsDB\")\n    val collection: MongoCollection[Document] = database.getCollection(\"rouletteHighScores\")\n\n    def archiveScore = {\n        val document: Document = Document(\n            \"Score\" -> HighScore.score,\n            \"Name\" -> User.userName\n        )\n\n        println(\"\")\n        println(\"Recording Score...\")\n        collection.insertOne(document).results()\n\n        println(\"\")\n        println(Console.GREEN + \"HIGHSCORES (TOP 10):\" + Console.WHITE)\n        println(\"\")\n\n        collection.find().sort(descending(\"Score\")).limit(10).printResults()\n        println(\"\")\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/StartGame.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/User.scala","languageId":"scala","version":1,"text":"package example\n\nobject User {\n    var coins = 100\n    var userName = \"\"\n\n    def namingUser = {\n        println(\"\")\n        println(\"Enter your name\")\n        userName = scala.io.StdIn.readLine()\n        println(\"\")\n        println(\"Welcome \" + userName)\n    }\n    \n    def displayStats = {\n        println(\"Casino Purse\")\n        println(\"Coins: \" + coins)\n        println(\" \")\n    }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/User.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/StartGame.scala","languageId":"scala","version":1,"text":"package example\n\nimport User._\nimport Roulette._\nimport HighScore._\n\nimport example.Helpers._\nimport org.mongodb.scala._\nimport org.mongodb.scala.model._\nimport scala.io.Source\nimport org.mongodb.scala.model.Filters._\nimport org.mongodb.scala.model.Sorts._\nimport org.mongodb.scala.model.Projections._\nimport org.mongodb.scala.model.Aggregates._\nimport org.mongodb.scala.model.Updates._\n\nobject StartGame {\n    def main(args: Array[String]) = {\n\n        Thread.sleep(1000)\n\n        User.namingUser\n        Roulette.chooseTheme\n\n        while(sitting == true){\n            if(User.coins > 0){\n                Roulette.showTable\n                Roulette.bet\n            }else{\n                println(\"Better luck next time\")\n                println(\"GAME OVER\")\n                sitting = false\n            }\n        }\n\n        println(\"\")\n        println(\"You walk from the table\")\n        println(\"\")\n        HighScore.recordScore\n        archiveScore\n    }\n\n    var sitting = true\n\n    val client: MongoClient = MongoClient()\n    val database: MongoDatabase = client.getDatabase(\"ScalaProjectsDB\")\n    val collection: MongoCollection[Document] = database.getCollection(\"rouletteHighScores\")\n\n    def archiveScore = {\n        val document: Document = Document(\n            \"Score\" -> HighScore.score,\n            \"Name\" -> User.userName\n        )\n\n        println(\"\")\n        println(\"Recording Score...\")\n        collection.insertOne(document).results()\n\n        println(\"\")\n        println(Console.GREEN + \"HIGHSCORES (TOP 10):\" + Console.WHITE)\n        println(\"\")\n\n        collection.find().sort(descending(\"Score\")).limit(10).printResults()\n        println(\"\")\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/StartGame.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/ScalaProjects/mongoroulette/src/main/scala/example/Roulette.scala","languageId":"scala","version":1,"text":"package example\n\nobject Roulette {\n\n    var RNG = scala.util.Random\n\n    var betType = 0\n    var betAmount = 0\n\n    var spinNumber: Int = 0\n    var singleNumber: Int = 0\n\n    var b = Console.BLACK\n    var r = Console.RED\n    var w = Console.WHITE\n    var g = Console.GREEN\n\n    def showTable = {\n        \n        var row1 = \"[ ] \"+r+\"[3] \"+b+\"[6] \"+r+\"[9] [12] \"+b+\"[15] \"+r+\"[18] [21] \"+b+\"[24] \"+r+\"[27] [30] \"+b+\"[33] \"+r+\"[36] \"+w+\"[2 to 1 Odds]\"\n        var row2 = g+\"[0] \"+b+\"[2] \"+r+\"[5] \"+b+\"[8] [11] \"+r+\"[14] \"+b+\"[17] [20] \"+r+\"[23] \"+b+\"[26] [29] \"+r+\"[32] \"+b+\"[35] \"+w+\"[2 to 1 Odds]\"\n        var row3 = \"[ ] \"+r+\"[1] \"+b+\"[4] \"+r+\"[7] \"+b+\"[10] [13] \"+r+\"[16] [19] \"+b+\"[22] \"+r+\"[25] \"+b+\"[28] [31] \"+r+\"[34] \"+w+\"[2 to 1 Odds]\"\n        var row4 = \"    [   1st 12     ] [    2nd  12      ] [    3rd  12      ]\"\n        var row5 = \"    [ 1-18 ][ EVEN ] \"+b+\"[ BLACK ] \"+r+\"[  RED  ] \"+w+\"[  ODD  ][  19-36 ]\"\n\n        println(\" \")\n        println(\" _____________________________ Roulette Table ______________________________\")\n        println(\"| \" + row1 + \" |\")\n        println(\"| \" + row2 + \" |\")\n        println(\"| \" + row3 + \" |\")\n        println(\"| \" + row4 + \"               |\")\n        println(\"| \" + row5 + \"               |\")\n        println(\" ___________________________________________________________________________\")\n        println(\" \")\n    }\n\n    def bet: Unit = {\n\n        println(\" \")\n        User.displayStats\n\n        println(\"Choose your Bet Type\")\n        println(\" 1: Row One      4: 1st 12      7: (1-18)      10: ODD      13: Single Number \")\n        println(\" 2: Row Two      5: 2nd 12      8: (19-36)     11: Black \")\n        println(\" 3: Row Three    6: 3rd 12      9: EVEN        12: Red \")\n\n        println(\" \")\n\n        betTypeMatch\n\n        println(\"Choose your Bet Amount\")\n        println(\" \")\n        println(\"BetAmount:\")\n\n        betAmount = scala.io.StdIn.readInt\n\n        if(betAmount > 0 & betAmount <= User.coins){\n            println(\" \")\n        }else if(betAmount > User.coins){\n            println(\" \")\n            println(\"- Not enough coins\")\n            println(\"- Bet = 0\")\n            betAmount = 0\n            println(\"\")\n        }else{\n            println(\" \")\n            println(\"- Not a valid number\")\n            println(\"- Bet = 0\")\n            betAmount = 0\n            println(\"\")\n        }\n\n        User.coins -= betAmount\n\n        spin\n\n        betType match{\n            case 1 =>   spinNumber match{\n                            case 3 | 6 | 9 | 12 | 15 | 18 | 21 | 24 | 27 | 30 | 33 | 36 =>  User.coins += betAmount * 3\n                                                                                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 3) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 2 =>   spinNumber match{\n                            case 2 | 5 | 8 | 11 | 14 | 17 | 20 | 23 | 26 | 29 | 32 | 35 =>  User.coins += betAmount * 3\n                                                                                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 3) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 3 =>   spinNumber match{\n                            case 1 | 4 | 7 | 10 | 13 | 16 | 19 | 22 | 25 | 28 | 31 | 34 =>  User.coins += betAmount * 3\n                                                                                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 3) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 4 =>   spinNumber match{\n                            case 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 =>    User.coins += betAmount * 3\n                                                                                        println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 3) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)   \n\n            case 5 =>   spinNumber match{\n                            case 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 =>   User.coins += betAmount * 3\n                                                                                                println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 3) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)  \n\n            case 6 =>   spinNumber match{\n                            case 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 =>   User.coins += betAmount * 3\n                                                                                                println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 3) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 7 =>   spinNumber match{\n                            case 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 =>  User.coins += betAmount * 2\n                                                                                                                    println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 2) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 8 =>   spinNumber match{\n                            case 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 => User.coins += betAmount * 2\n                                                                                                                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 2) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)   \n\n            case 9 =>   if((spinNumber + 2) % 2 == 0){\n                            User.coins += betAmount * 2\n                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 2) + \" coin(s)\")\n                        }else{\n                            println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 10 =>  if((spinNumber + 2) % 2 != 0){\n                            User.coins += betAmount * 2\n                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 2) + \" coin(s)\")\n                        }else{\n                            println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 11 =>  spinNumber match{\n                            case 2 | 4 | 6 | 8 | 10 | 11 | 13 | 15 | 17 | 20 | 22 | 24 | 26 | 28 | 29 | 31 | 33 | 35 => User.coins += betAmount * 2\n                                                                                                                        println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 2) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 12 =>  spinNumber match{\n                            case 1 | 3 | 5 | 7 | 9 | 12 | 14 | 16 | 18 | 19 | 21 | 23 | 25 | 27 | 30 | 32 | 34 | 36 =>  User.coins += betAmount * 2\n                                                                                                                        println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 2) + \" coin(s)\")\n                            case _ =>   println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n\n            case 13 =>  if(spinNumber == singleNumber){\n                            User.coins += betAmount * 37\n                            println(Console.GREEN + \"Prize: \" + Console.WHITE + (betAmount * 37) + \" coin(s)\")\n                        }else{\n                            println(Console.RED + \"Lost: \" + Console.WHITE + betAmount + \" coin(s)\")\n                        }\n                        Thread.sleep(1000)\n        }\n\n        playOrCollect\n    }\n\n    def spin = {\n        println(Console.GREEN + \"Spinning...\")\n        Thread.sleep(1000)\n        spinNumber = RNG.nextInt(36)\n\n        println(Console.WHITE + \"\")\n        println(\"Number is  - \" + Console.CYAN + \"[\" + spinNumber + \"]\" + Console.WHITE + \" - \")\n        println(\"\")\n    }\n\n    def betTypeMatch: Unit = {\n        println(\"Choose Bet:\")\n\n        betType = scala.io.StdIn.readInt\n        println(\"\")\n\n        betType match{\n            case 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 => println(\" \")\n\n            case 13 =>  println(\"Choose your number\")\n                        singleNumber = scala.io.StdIn.readInt\n\n            case _ =>   println(\"Not a valid number\")\n                        println(\"- Bet = 0\")\n                        println(\"\")\n                        betTypeMatch\n        }\n    }\n\n    def playOrCollect: Unit = {\n        println(\"\")\n        User.displayStats\n        \n        println(\"1: Play Again\")\n        println(\"2: Collect Winnings\")\n\n        singleNumber = scala.io.StdIn.readInt\n\n        singleNumber match{\n            case 1 =>   println(\"Good Luck!\")\n\n            case 2 =>   println(\"\")\n                        println(\"Are you sure?\")\n                        println(\"1: Yes\")\n                        println(\"2: No\")\n\n                        singleNumber = scala.io.StdIn.readInt\n\n                        singleNumber match{\n                            case 1 =>   StartGame.sitting = false\n                            case 2 =>   println(\"\")\n                                        playOrCollect\n                            case _ =>   println(\"Enter a valid number\")\n                                        playOrCollect\n                        }\n\n            case _ =>   println(\"Enter a valid number\")   \n                        playOrCollect\n        }\n    }\n\n    def chooseTheme: Unit = {\n        println(\"\")\n        println(\"Choose Color Theme:\")\n        println(\"1: Black + Red\")\n        println(\"2: Blue + Green\")\n\n        singleNumber = scala.io.StdIn.readInt()\n\n        singleNumber match{\n            case 1 => println(\"\")\n\n            case 2 => b = Console.CYAN\n                      r = Console.GREEN\n                      println(\"\")\n\n            case _ => println(\"Enter Valid Option\")\n                      chooseTheme\n        }\n    }\n}\n\n"}})[0m
